#version 430

layout(local_size_x = 16, local_size_y = 16) in;

layout (std430,binding = 4) buffer height0
{
	float u0[];
	
};

layout (std430, binding = 5) buffer height1
{
	float u1[];
	
};

layout (std430,binding = 6) buffer velocity
{
	float v[];
	
};

layout (std430,binding = 7) buffer terrainHeight
{	
	float terrHeight[];
	
};

layout (std430,binding = 8) buffer difference{
	float diff[];
};

uniform ivec2 size; //width height

float getHeight0(int i, int j, float ourHeight){
	if( i < 0 || j < 0 || i > size.x -1 || j > size.y -1){
		return ourHeight-0.0001;
	}

	i = clamp(i,0,size.x-1);
	j = clamp(j,0,size.y-1);
	float outTemp = u0[i+j*size.x];
	return outTemp;
	if(outTemp - terrHeight[i+j*size.x] < 0.00001f){
		outTemp = ourHeight;
	}
	return outTemp;

}


float getHeight1(int i, int j, float ourHeight){
	if( i < 0 || j < 0 || i > size.x -1 || j > size.y -1){
		return ourHeight-0.0001;
	}

	i = clamp(i,0,size.x-1);
	j = clamp(j,0,size.y-1);
	float outTemp = u1[i+j*size.x];
	return outTemp;
	if(outTemp - terrHeight[i+j*size.x] < 0.00001f){
		outTemp = ourHeight;
	}
	return outTemp;

}


void main(){
	//determine where to sample
	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
	int i = storePos.x;
	int j = storePos.y;

	if(i < size.x && j < size.y) {
		int offset = (i + j*size.x);
		float ourHeight0 = u0[offset];
		float ourHeight1 = u1[offset];
		
		float u_east = getHeight0((i+1), j, ourHeight0)  - getHeight1((i+1), j, ourHeight1);
		float u_west = getHeight0((i-1), j, ourHeight0)  - getHeight1((i-1), j, ourHeight1);
		float u_south = getHeight0(i, (j-1), ourHeight0) - getHeight1(i, (j-1), ourHeight1);
		float u_north = getHeight0(i, (j+1), ourHeight0) - getHeight1(i, (j+1), ourHeight1);
		
		diff[offset] = ourHeight0 - ourHeight1 + u_west + u_east + u_south + u_north;

		
	}
	if(i < size.x && j < size.y) {
		int offset = (i + j*size.x);
		u1[offset] = u1[offset] + diff[offset]/50.0f;
	}

}

	
