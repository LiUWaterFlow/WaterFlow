/// @file updateVelocityShader.comp
/// @brief Compute shader for updating the velocities
///

#version 430

layout(local_size_x = 16, local_size_y = 16) in; ///< This should be a nxn, where n is power of 2, however next step would result in 32x32, 1024 threads which is not always supported.

layout  (std430,binding = 4) readonly buffer height0 ///< height ping buffer
{
	float water0[];
	
};

layout (std430, binding = 5) readonly buffer height1///< height pong buffer
{
	float water1[];	
};

//Since in previous step, (advectVelocity) we used this as inbuffer and vxout as out. Now we are interested in the new data and want to save it to a out buffer. vin cotains nothing of value anymore. use it as out data. DO NOT SWAP IN CPP.

layout (std430,binding = 6) writeonly buffer velocityX ///< VelocityX write buffer
{
	float vxin[];
	
};

layout (std430,binding = 7) readonly buffer velocityXout ///< VelocityX read buffer
{
	float vxout[];
	
};


layout (std430,binding = 8) writeonly buffer velocityY ///< VelocityY write buffer
{	
	float vyin[];
	
};


layout (std430,binding = 9) readonly buffer velocityYout ///< VelocityY read buffer
{	
	float vyout[];
	
};

layout (std430,binding = 10) readonly buffer Terrain ///< Terrain height read buffer
{	
	float terr[];
	
};


uniform ivec2 size; ///<width height
uniform float dt; ///< simulation dt

void main(){

	float GRAVITY = -9.81f;
	float C = dt*GRAVITY;
	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
	int i = storePos.x;
	int j = storePos.y;
	int offset = (i + j*size.x);
	
	
	int ipos= clamp(i+1,0,size.x-1);
	int jpos = clamp(j+1,0,size.y-1);
	int imin = clamp(i-1,0,size.x-1);
	int jmin = clamp(j-1,0,size.y-1);
	
		//Coordinate system HERE! <  is to the right and up.

		int offsetright = ipos+j*size.x;
		int offsetleft = imin+j*size.x;
		int offsetup = i+jpos*size.x;
		int offsetdown = i+jmin*size.x;
		int offsettopright = ipos+jpos*size.x;
		int sampX,sampY;
	
	
	float ourWater = water0[offset];
	float ourTot = ourWater+terr[offset];
	
	if(i > 1  && i < size.x-1 && j < size.y-1) {
		float neighWater = water0[offsetleft];
		float neighTot = neighWater + terr[offsetleft];
		/* 
		float change = clamp(ourTot - neighTot,-ourWater/2.0f,neighWater/.0f);
		
		*/
		
		float change = ourTot-neighTot;
		//vxin[offset] = clamp((vxout[offset] + C*change),-10.0f,10.0f);
		vxin[offset] = vxout[offset] + C*change;
		
	}
	if(j > 1  && i < size.x-1 && j < size.y-1) {
	
		float neighWater = water0[offsetdown];
		float neighTot = neighWater +terr[offsetdown];
		/* So this ensures that the velocities do not exceed too large values and tries to compensate for topology
		float change = clamp(ourTot-neighTot,-ourWater,neighWater);
				
		*/
			
		float change = ourTot-neighTot;
		//vyin[offset] = clamp((vyout[offset] + C*change),-10.0f,10.0f);
		vyin[offset] = vyout[offset] + C*change;
	}
	
	if(i == 0 || i ==size.x -1){
		vyin[offset] = 0.0f;
	}
	if(j == 0 || j ==size.y -1){
		vxin[offset] = 0.0f;
	}
	
	
	
}
