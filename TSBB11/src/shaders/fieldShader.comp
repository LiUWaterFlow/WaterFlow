#version 430

layout(local_size_x = 16, local_size_y = 16) in;

layout  (std430,binding = 4) readonly buffer height0
{
	float u0[];
	
};

layout (std430, binding = 5) writeonly buffer height1
{
	float u1[];	
};

layout (std430,binding = 6) buffer velocity
{
	float v[];
	
};

layout (std430,binding = 7) readonly buffer terrainHeight
{	
	float terrHeight[];
	
};

uniform ivec2 size; //width height

float getHeight(int i, int j, float ourTot, float ourTerr){
	if( i < 0 || j < 0 || i > size.x -1 || j > size.y -1){
		return 0.0f;
	}

	i = clamp(i,0,size.x-1);
	j = clamp(j,0,size.y-1);
	float theirTot = u0[i+j*size.x];
	float theirTerr = terrHeight[i+j*size.x];	
	float theirWater = theirTot - theirTerr;
	float ourWater = ourTot - ourTerr;
	float diff = theirTot - ourTot;//ourTot - theirTot;
	//
	return clamp(diff,-ourWater/4.0f,theirWater/4.0f);
}

void main(){
	//determine where to sample
	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
	int i = storePos.x;
	int j = storePos.y;

	//Change these to clamps.
	if(i < size.x && j < size.y) {

		float dt = 1.0f/(20.0f*30.0f);
		int offset = (i + j*size.x);
		float c2 = 25000.0f;
		
		float h2 = 4.0f;

		float ourHeight = u0[offset];
		float ourTerr = terrHeight[offset];
		float u_east = getHeight((i+1), j, ourHeight, ourTerr);
		float u_west = getHeight((i-1), j, ourHeight,ourTerr);
		float u_south = getHeight(i, (j-1), ourHeight,ourTerr);
		float u_north = getHeight(i, (j+1), ourHeight,ourTerr);
		
		float f = c2/h2*(u_west + u_east + u_south + u_north);
		
		//f = clamp(f, -20.0f, 20.0f);
		
		float vel =v[offset] + f*dt;
		
		v[offset] = vel *0.96f;// *0.9999995f
		u1[offset] = max((ourHeight + vel * dt),terrHeight[offset]);

	}
}
