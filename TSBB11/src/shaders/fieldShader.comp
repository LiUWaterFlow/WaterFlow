#version 430

layout(local_size_x = 16, local_size_y = 16) in;

layout (shared,binding = 4) buffer height0
{
	float u0[];
	
};

layout (shared, binding = 5) buffer height1
{
	float u1[];
	
};

layout (shared,binding = 6) buffer velocity
{
	float v[];
	
};

layout (shared,binding = 7) buffer terrainHeight
{	
	float terrHeight[];
	
};

uniform ivec2 size; //width height

float getHeight(int i, int j, float ourHeight){
	i = clamp(i,0,size.x-1);
	j = clamp(j,0,size.y-1);
	float outTemp = u0[i+j*size.x];
	if(outTemp - terrHeight[i+j*size.x] < 0.3f){
		outTemp = ourHeight;
	}
	return outTemp;

}

void main(){
	//determine where to sample
	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
	int i = storePos.x;
	int j = storePos.y;
	if(i < size.x && j < size.y) {
		
		float dt = 0.005*4.9f;
		int offset = (i + j*size.x);
		float c2 = 1;
		float max_c = (1.0 / dt);
		

		float h2 = 4;

		float ourHeight = u0[offset];

		float u_east = getHeight((i+1) , j, ourHeight);// u[std::min(i + 1, width)][j];
		float u_west = getHeight((i-1), j, ourHeight);// u[std::max(i-1,0)][j];
		float u_south = getHeight(i, (j-1), ourHeight);// u[i][std::max(j -1,0)];
		float u_north = getHeight(i, (j+1), ourHeight);// u[i][std::min(j + 1, height)];
		
		float f = c2*(u_west + u_east + u_south + u_north - 4 * ourHeight)/h2;
		
		f = clamp(f, -0.1f, 0.1f);
		float vel = v[offset] + f*dt;
		v[offset] = vel *0.995f;
		u1[offset] = ourHeight + vel * dt;
		
	}
}
