#version 430

layout(local_size_x = 16, local_size_y = 16) in;

layout (shared,binding = 0) readonly buffer height0
{
	float terrHeightIn[];
	
};


layout (shared,binding = 1) writeonly buffer height1
{
	float terrHeightOut[];

};

uniform ivec2 size;

void main(void){
 
	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
	int x = clamp(storePos.x, 0, size.x);
	int y = clamp(storePos.y, 0, size.y);

	int xplus = clamp(x + 1, 0, size.x);
    int xminus = clamp(x - 1, 0, size.x);
	int yplus = clamp(y + 1, 0, size.y);
	int yminus = clamp(y - 1, 0, size.y);
	
	float filtered_color, filtered_bool;

	filtered_color =  4.0 * terrHeightIn[x + y * size.x];
	filtered_color += 2.0 * terrHeightIn[xplus + y * size.x];
	filtered_color += 2.0 * terrHeightIn[xminus + y * size.x];
	filtered_color += 2.0 * terrHeightIn[x + yplus * size.x];
	filtered_color += 2.0 * terrHeightIn[x + yminus * size.x];
	filtered_color += 1.0 * terrHeightIn[xplus + yplus * size.x];
	filtered_color += 1.0 * terrHeightIn[xplus + yminus * size.x];
	filtered_color += 1.0 * terrHeightIn[xminus + yplus * size.x];
	filtered_color += 1.0 * terrHeightIn[xminus + yminus * size.x];
	filtered_color = filtered_color / 16.0f;

	filtered_bool =  4.0 * float(terrHeightIn[x + y * size.x] > 0.0f);
	filtered_bool += 2.0 * float(terrHeightIn[xplus + y * size.x] > 0.0f);
	filtered_bool += 2.0 * float(terrHeightIn[xminus + y * size.x] > 0.0f);
	filtered_bool += 2.0 * float(terrHeightIn[x + yplus * size.x] > 0.0f);
	filtered_bool += 2.0 * float(terrHeightIn[x + yminus * size.x] > 0.0f);
	filtered_bool += 1.0 * float(terrHeightIn[xplus + yplus * size.x] > 0.0f);
	filtered_bool += 1.0 * float(terrHeightIn[xplus + yminus * size.x] > 0.0f);
	filtered_bool += 1.0 * float(terrHeightIn[xminus + yplus * size.x] > 0.0f);
	filtered_bool += 1.0 * float(terrHeightIn[xminus + yminus * size.x] > 0.0f);
	filtered_bool = filtered_bool / 16.0f;

 	if(filtered_bool > 0.0f && terrHeightIn[x + y * size.x] < 0.0f)
		terrHeightOut[x + y * size.x] = filtered_color / filtered_bool;
}
