/// @file heightMap.comp
/// @brief Calculates vertex data
///
/// Output will be Vertice coordinates, texture coordinates and indices
/// for rendering the height map as a model. The normals are created in 
/// another shader
/// @see normals.comp

#version 430

layout(local_size_x = 16, local_size_y = 16) in; ///< Size of calculation kernels on GPU, preferably power of 2. 

layout (std430, binding = 0) writeonly buffer Pos  ///< Position of vertices to be written, y will be set to lower values if a WATER height is to be modeled and the WATER is under the surface.
{
	float position[];
};
	
layout (std430, binding = 1) writeonly buffer TexCoord  ///< Texcoords to be written
{
	vec2 texCoord[];
};

layout (std430, binding = 2) writeonly buffer index  ///< indices to be written.
{	
	int indices[];
};

layout (std430, binding = 3) readonly buffer height  ///< the terrheight which is used to create the model.
{	
	float terrHeight[];
};

uniform ivec2 size; ///<width height
uniform float scale; ///<height scale for terrain
layout (rgba32f, binding = 0) readonly uniform image2D textureOut; ///< Texture which can be used to read height in other shaders.

void main() {
	//determine where to sample
	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);  ///< x,y global ID (i.e. which thread).

	int x = clamp(storePos.x, 0, size.x-1);  ///< x - clamped to working interval
	int y = clamp(storePos.y, 0, size.y-1);  ///< y - clamped to working interval
	int xplus = clamp(x + 1, 0, size.x-1);  ///< x + 1  - clamped to working interval
	int xminus = clamp(x - 1, 0, size.x-1);  ///< x - 1 - clamped to working interval
	int yplus = clamp(y + 1, 0, size.y-1);  ///< y + 1 - clamped to working interval
	int yminus = clamp(y - 1, 0, size.y-1);   ///< y - 1 - clamped to working interval

	int offset = (x + y * size.x) * 3; ///< writing offset for arrays
	
	float terr = imageLoad(textureOut,ivec2(x,y)).w; ///< Terrain height used when constructing water model
	
	float ourTerr = terrHeight[x+y*size.x]; ///< The height of the current model
	
	//write to position (x,z) from where we read, y is data we read.
	position[offset + 0] = float(x); 
	if(scale  < 0.0f){
		position[offset + 1] =  ourTerr;
	}else{
		position[offset + 1] =  (ourTerr  <  terr*scale ) ? ourTerr-100.0f  : ourTerr;
	}
	position[offset + 2] = float(y);

	//texCoord = x/width, z/height (typ)
	texCoord[offset / 3] = vec2(float(x) / float(size.x), float(y) / float(size.y));

	//problem remaining is indices. 
	if(x != 0 && y != 0){
		int offsetIndex = (xminus + yminus * (size.x - 1)) * 6; ///< Array offset
			
		int vert1 = xminus + yminus * size.x; ///< The first vertex
		int vert2 = xminus + y * size.x; ///< The second vertex
		int vert3 = x + y * size.x; ///< The third vertex
		int vert4 = x + yminus * size.x; ///< The fourth vertex

		indices[offsetIndex + 0] = vert4; 
		indices[offsetIndex + 1] = vert1;
		indices[offsetIndex + 2] = vert3;

		indices[offsetIndex + 3] = vert1;
		indices[offsetIndex + 4] = vert2;
		indices[offsetIndex + 5] = vert3;
	}
}
