#version 430

layout(local_size_x = 16, local_size_y = 16) in;

layout (std430, binding = 0) writeonly buffer Pos
{
	float position[];
};
	
layout (std430, binding = 1) writeonly buffer TexCoord
{
	vec2 texCoord[];
};

layout (std430, binding = 2) writeonly buffer index
{	
	int indices[];
};

layout (std430, binding = 3) readonly buffer height
{	
	float terrHeight[];
};

uniform ivec2 size; //width height

void main() {
	//determine where to sample
	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);

	int x = clamp(storePos.x, 0, size.x-1); 
	int y = clamp(storePos.y, 0, size.y-1); 
	int xplus = clamp(x + 1, 0, size.x-1); 
	int xminus = clamp(x - 1, 0, size.x-1); 
	int yplus = clamp(y + 1, 0, size.y-1); 
	int yminus = clamp(y - 1, 0, size.y-1);  

	int offset = (x + y * size.x) * 3;

	//write to position (x,z) from where we read, y is data we read.
	position[offset + 0] = float(x);
	position[offset + 1] = terrHeight[x + y * size.x];
	position[offset + 2] = float(y);

	//texCoord = x/width, z/height (typ)
	texCoord[offset / 3] = vec2(float(x) / float(size.x), float(y) / float(size.y));

	//problem remaining is indices. 
	if(x != 0 && y != 0){
		int offsetIndex = (xminus + yminus * (size.x - 1)) * 6; 
			
		int vert1 = xminus + yminus * size.x;
		int vert2 = xminus + y * size.x;
		int vert3 = x + y * size.x;
		int vert4 = x + yminus * size.x;

		indices[offsetIndex + 0] = vert4;
		indices[offsetIndex + 1] = vert1;
		indices[offsetIndex + 2] = vert3;

		indices[offsetIndex + 3] = vert1;
		indices[offsetIndex + 4] = vert2;
		indices[offsetIndex + 5] = vert3;
	}
}
